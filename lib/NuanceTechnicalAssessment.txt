1)

  /.*\d{3,4}[^\w]/g

2)

  .paragraphBodyStyle img:first-of-type {
      border: 10px dotted pink;
  }

3)

  It's also possible to use Object.entries, although some browsers don't support it.

  const cartPrinter = (cart) => {
    const [totalItems, items, total] = [cart.Items, cart.Item, cart.Total];
    console.log(`Items: ${totalItems}\n\n`);
    Object.keys(items).forEach(itemName => {
      console.log(` - ${itemName} ($${items[itemName].price})\n\n`)
    })
    console.log(`Total: ${total}`);
  };

4)

  javascript:void%20function(){var%20e=window.location.href.match(/[^%26%3F]*=[^%26%3F]*/g),r={};if(e){e.forEach(function(e){var%20a=e.split(%22=%22).map(function(e){return%20e.toLowerCase()}),t=a[0],o=a[1];r[t]=o});var%20a=prompt(%22Please%20enter%20a%20URL%20parameter:%22).toLowerCase(),t=r[a];alert(t%3Ft:%22Parameter%20not%20found.%22)}else%20alert(%22There%20are%20no%20valid%20parameters%20in%20the%20current%20URL%22)}();

5)

  <business-rule id="3" name="Rule-3">
    <condition>
      <when>
        <or>
          <event event-type="onPageLanding" />
          <event event-type="onChatIconClicked">
            <delay>
              <duration>PT5S</duration>
            </delay>
          </event>
        </or>
      </when>
      <and>
        <not>
          <where>
            <url-match regexp=".*test.*"/>
          </where>
        </not>
        <number-compare test="equal-to">
          <landing-count counter-name="ContactUs"/>
          <count>0</count>
        </number-compare>
        <number-compare test="less-than">
            <as-number>
              <js-string-ref js-var-id="cart.Total"/>
            </as-number>
            <number>100</number>
        </number-compare>
      </and>
    </condition>
    <actions>
      <launch-chat/>
    </actions>
  </business-rule>

6)

  This solution uses one universal event listener and is future proofed so that the alerts work for any additional 'input' elements.
  Also, only the 'select' elements in the contact us container will increment the click counter, in case any future 'select' elements are added to the page.
  Another valid approach would be to have a universal click handler for 'input' elements, and a click handler for the 'select' elements within the contact us container.
  This would negate having to check the path to see if the 'select' element being clicked is actually in the container at the cost of more code being written.

  let clickCounter = 0;

  document.addEventListener('click', e => {
    e.preventDefault();
    let tag = e.target.tagName,
        selectWithinContactForm = e.path.filter(el => el.className === "signUpForDownload sectionContainer");

    if (tag === 'INPUT' || tag === 'SELECT' && selectWithinContactForm) {
      clickCounter++;
      if (clickCounter % 2 === 0) {
        alert("Two fields clicked!");
      }
    }
  })

7)

  I got the button to show up by removing the 'display: none' property. Then I changed the conditional in the source file and got the full page to show this:

  Your secret number is 126. Fix the button to get a fact about your secret number.
  Your fact is: the number of years that Gilgamesh reigned according to the Sumerian king list
